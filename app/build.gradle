import java.text.SimpleDateFormat
import java.util.regex.Matcher
import java.util.regex.Pattern

def versionMajor = 6
def versionMinor = 7
def versionPatch = 10
def versionBuild = 0
def versionSuffix = versionBuild > 0 ? "-beta" : ""


apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
  maven { url 'https://maven.google.com' }
}

android {
  compileSdkVersion 26
  buildToolsVersion "26.0.1"

  productFlavors {
    free {
      applicationId "com.jrummy.busybox.installer"
    }
    paid {
      applicationId "com.jrummy.busybox.installer.pro"
    }
    staging {
      applicationIdSuffix = ".installer.staging"
      ext.betaDistributionGroupAliases = "Internal"
      ext.betaDistributionNotifications = true
      ext.betaDistributionReleaseNotes="Add Admob interstitial placements\n" +
              "Three New Admob Banner Placements\n" +
              "Integrate cross promo screen in Firebase Remote Config for both versions of BusyBox (Paid and Free)\n" +
              "Set up Fabric Custom events to track click through on each app button on the cross promotion screen\n" +
              "Remove 1 of the 2 ad - free purchase options inside of the free BusyBox app\n" +
              "Integrate Firebase Push Notifications for Paid and free app\n" +
              "Integrate standard Root Checker message that pops up letting users know if their device is rooted (only for free app)\n" +
              "Integrate Install Interstitials"
    }
  }

  signingConfigs {
    release {
      storeFile file(KEYSTORE_FILE)
      storePassword KEYSTORE_PASSWORD
      keyAlias KEYSTORE_ALIAS
      keyPassword KEYSTORE_PASSWORD
    }
    debug {
      storeFile file("$rootDir/debug.jks")
      storePassword "123456"
      keyAlias "debug"
      keyPassword "123456"
    }
  }

  defaultConfig {
    applicationId "com.jrummyapps.busybox"
    minSdkVersion 14
    targetSdkVersion 25
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}${versionSuffix}"
    buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    multiDexEnabled true
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }
}

ext {
  SUPPORT_LIBRARY_VERSION = "26.1.0"
}

dependencies {
  compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
  compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
  compile "com.android.support:support-v4:$SUPPORT_LIBRARY_VERSION"
  compile "com.android.support:support-v13:$SUPPORT_LIBRARY_VERSION"
  compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
  compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"

  stagingCompile 'com.google.firebase:firebase-ads:11.6.0'
  stagingCompile 'com.anjlab.android.iab.v3:library:1.0.32'

  freeCompile 'com.google.firebase:firebase-ads:11.6.0'
  freeCompile 'com.anjlab.android.iab.v3:library:1.0.32'
  freeCompile 'com.jaredrummler:android-device-names:1.1.4'

  compile 'com.jrummyapps:sweetsweetdesserts:1.0.0'
  compile 'com.jaredrummler:material-spinner:1.0.9'
  compile 'com.jaredrummler:fastscroll-recyclerview:1.0.1'
  compile 'org.apache.commons:commons-compress:1.5'
  compile 'com.commit451:elasticdragdismisslayout:1.0.2'
  compile 'com.jrummyapps:texteditor:2.1.0'

  compile 'com.jrummyapps:downloader:2.0.0'
  compile 'com.jrummyapps:morphing-dialog:1.0.0'
  compile 'com.jrummyapps:html-builder:1.0.1'
  compile 'com.jrummyapps:legacy-obfuscate:1.0.0'
  compile 'com.google.code.gson:gson:2.4'

  /* Remote Config */
  compile 'com.google.firebase:firebase-config:11.6.0'

  /* Firebase push notifications */
  compile 'com.google.firebase:firebase-messaging:11.6.0'

  compile 'com.jaredrummler:animated-svg-view:1.0.5'

  compile 'com.android.support:multidex:1.0.1'
}

apply plugin: 'com.google.gms.google-services'

afterEvaluate {
  initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  propertiesFile.delete()
  def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
  if (getCurrentFlavor() == "staging") {
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: STAGING_FABRIC_API_SECRET)
      entry(key: "apiKey", value: STAGING_FABRIC_API_KEY)
    }
  } else {
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: FABRIC_API_SECRET)
      entry(key: "apiKey", value: FABRIC_API_KEY)
    }
  }
}

def getCurrentFlavor() {
  Gradle gradle = getGradle()
  String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

  Pattern pattern

  if (tskReqStr.contains("assemble"))
    pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
  else
    pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

  Matcher matcher = pattern.matcher( tskReqStr )

  if (matcher.find())
    return matcher.group(1).toLowerCase()
  else {
    println "NO MATCH FOUND"
    return "";
  }
}

ext {
  STAGING_FABRIC_API_SECRET = "61384f88a086d76fc9de1967bfba80f4bd0231da74fce583d051205561f5a54a"
  STAGING_FABRIC_API_KEY = "f8c49233711f5a206caa0d0f171774f000fc07f5"
}

def gitSha() {
  return "git --git-dir=${projectDir}/../.git --work-tree=${projectDir}/.. rev-parse --short HEAD".execute().text.trim()
}

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}